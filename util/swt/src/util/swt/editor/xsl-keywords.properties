NOTATION-equal=($arg1 as xs:NOTATION, $arg2 as xs:NOTATION) as xs:boolean
QName=($paramURI as xs:string?, $paramQName as xs:string) as xs:QName
QName-equal=($arg1 as xs:QName, $arg2 as xs:QName) as xs:boolean
abs=($arg as numeric?) as numeric?
add-dayTimeDuration-to-date=($arg1 as xs:date, $arg2 as xs:dayTimeDuration) as xs:date
add-dayTimeDuration-to-dateTime=($arg1 as xs:dateTime, $arg2 as xs:dayTimeDuration) as xs:dateTime
add-dayTimeDuration-to-time=($arg1 as xs:time, $arg2 as xs:dayTimeDuration) as xs:time
add-dayTimeDurations=($arg1 as xs:dayTimeDuration, $arg2 as xs:dayTimeDuration) as xs:dayTimeDuration
add-yearMonthDuration-to-date=($arg1 as xs:date, $arg2 as xs:yearMonthDuration) as xs:date
add-yearMonthDuration-to-dateTime=($arg1 as xs:dateTime, $arg2 as xs:yearMonthDuration) as xs:dateTime
add-yearMonthDurations=($arg1 as xs:yearMonthDuration, $arg2 as xs:yearMonthDuration) as xs:yearMonthDuration
adjust-date-to-timezone=($arg as xs:date?) as xs:date?
#adjust-date-to-timezone=($arg as xs:date?, $timezone as xs:dayTimeDuration?) as xs:date?
adjust-dateTime-to-timezone=($arg as xs:dateTime?) as xs:dateTime?
#adjust-dateTime-to-timezone=($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?) as xs:dateTime?
adjust-time-to-timezone=($arg as xs:time?) as xs:time?
#adjust-time-to-timezone=($arg as xs:time?, $timezone as xs:dayTimeDuration?) as xs:time?
avg=($arg as xs:anyAtomicType*) as xs:anyAtomicType?
base-uri=() as xs:anyURI?
#base-uri=($arg as node()?) as xs:anyURI?
base64Binary-equal=($value1 as xs:base64Binary, $value2 as xs:base64Binary) as xs:boolean
boolean=($arg as item()*) as xs:boolean
boolean-equal=($value1 as xs:boolean, $value2 as xs:boolean) as xs:boolean
boolean-greater-than=($arg1 as xs:boolean, $arg2 as xs:boolean) as xs:boolean
boolean-less-than=($arg1 as xs:boolean, $arg2 as xs:boolean) as xs:boolean
ceiling=($arg as numeric?) as numeric?
codepoint-equal=($comparand1 as xs:string?, $comparand2 as xs:string?) as xs:boolean?
codepoints-to-string=($arg as xs:integer*) as xs:string
#collection=() as node()*
collection=($arg as xs:string?) as node()*
compare=($comparand1 as xs:string?, $comparand2 as xs:string?) as xs:integer?
#compare=($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string) as xs:integer?
concat=($arg1 as xs:anyAtomicType?, $arg2 as xs:anyAtomicType?, ...) as xs:string
concatenate=($seq1 as item()*, $seq2 as item()*) as item()*
contains=($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean
#contains=($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean
count=($arg as item()*) as xs:integer
current-date=() as xs:date
current-dateTime=() as xs:dateTime
current-time=() as xs:time
data=($arg as item()*) as xs:anyAtomicType*
date-equal=($arg1 as xs:date, $arg2 as xs:date) as xs:boolean
date-greater-than=($arg1 as xs:date, $arg2 as xs:date) as xs:boolean
date-less-than=($arg1 as xs:date, $arg2 as xs:date) as xs:boolean
dateTime=($arg1 as xs:date?, $arg2 as xs:time?) as xs:dateTime?
dateTime-equal=($arg1 as xs:dateTime, $arg2 as xs:dateTime) as xs:boolean
dateTime-greater-than=($arg1 as xs:dateTime, $arg2 as xs:dateTime) as xs:boolean
dateTime-less-than=($arg1 as xs:dateTime, $arg2 as xs:dateTime) as xs:boolean
day-from-date=($arg as xs:date?) as xs:integer?
day-from-dateTime=($arg as xs:dateTime?) as xs:integer?
dayTimeDuration-greater-than=($arg1 as xs:dayTimeDuration, $arg2 as xs:dayTimeDuration) as xs:boolean
dayTimeDuration-less-than=($arg1 as xs:dayTimeDuration, $arg2 as xs:dayTimeDuration) as xs:boolean
days-from-duration=($arg as xs:duration?) as xs:integer?
deep-equal=($parameter1 as item()*, $parameter2 as item()*) as xs:boolean
#deep-equal=($parameter1 as item()*, $parameter2 as item()*, $collation as string) as xs:boolean
default-collation=() as xs:string
distinct-values=($arg as xs:anyAtomicType*) as xs:anyAtomicType*
#distinct-values=($arg as xs:anyAtomicType*, $collation as xs:string) as xs:anyAtomicType*
divide-dayTimeDuration=($arg1 as xs:dayTimeDuration, $arg2 as xs:double) as xs:dayTimeDuration
divide-dayTimeDuration-by-dayTimeDuration=($arg1 as xs:dayTimeDuration, $arg2 as xs:dayTimeDuration) as xs:decimal
divide-yearMonthDuration=($arg1 as xs:yearMonthDuration, $arg2 as xs:double) as xs:yearMonthDuration
divide-yearMonthDuration-by-yearMonthDuration=($arg1 as xs:yearMonthDuration, $arg2 as xs:yearMonthDuration) as xs:decimal
doc=($uri as xs:string?) as document-node()?
doc-available=($uri as xs:string?) as xs:boolean
document-uri=($arg as node()?) as xs:anyURI?
duration-equal=($arg1 as xs:duration, $arg2 as xs:duration) as xs:boolean
element-with-id=($arg as xs:string*) as element()*
#element-with-id=($arg as xs:string*, $node as node()) as element()*
empty=($arg as item()*) as xs:boolean
encode-for-uri=($uri-part as xs:string?) as xs:string
ends-with=($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean
#ends-with=($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean
#error=() as none
error=($error as xs:QName) as none
#error=($error as xs:QName?, $description as xs:string) as none
#error=($error as xs:QName?, $description as xs:string, $error-object as item()*) as none
escape-html-uri=($uri as xs:string?) as xs:string
exactly-one=($arg as item()*) as item()
except=($parameter1 as node()*, $parameter2 as node()*) as node()*
exists=($arg as item()*) as xs:boolean
false=() as xs:boolean
floor=($arg as numeric?) as numeric?
gDay-equal=($arg1 as xs:gDay, $arg2 as xs:gDay) as xs:boolean
gMonth-equal=($arg1 as xs:gMonth, $arg2 as xs:gMonth) as xs:boolean
gMonthDay-equal=($arg1 as xs:gMonthDay, $arg2 as xs:gMonthDay) as xs:boolean
gYear-equal=($arg1 as xs:gYear, $arg2 as xs:gYear) as xs:boolean
gYearMonth-equal=($arg1 as xs:gYearMonth, $arg2 as xs:gYearMonth) as xs:boolean
hexBinary-equal=($value1 as xs:hexBinary, $value2 as xs:hexBinary) as xs:boolean
hours-from-dateTime=($arg as xs:dateTime?) as xs:integer?
hours-from-duration=($arg as xs:duration?) as xs:integer?
hours-from-time=($arg as xs:time?) as xs:integer?
#id=($arg as xs:string*) as element()*
id=($arg as xs:string*, $node as node()) as element()*
#idref=($arg as xs:string*) as node()*
idref=($arg as xs:string*, $node as node()) as node()*
implicit-timezone=() as xs:dayTimeDuration
in-scope-prefixes=($element as element()) as xs:string*
index-of=($seqParam as xs:anyAtomicType*, $srchParam as xs:anyAtomicType) as xs:integer*
#index-of=($seqParam as xs:anyAtomicType*, $srchParam as xs:anyAtomicType, $collation as xs:string) as xs:integer*
insert-before=($target as item()*, $position as xs:integer, $inserts as item()*) as item()*
intersect=($parameter1 as node()*, $parameter2 as node()*) as node()*
iri-to-uri=($iri as xs:string?) as xs:string
is-same-node=($parameter1 as node(), $parameter2 as node()) as xs:boolean
#lang=($testlang as xs:string?) as xs:boolean
lang=($testlang as xs:string?, $node as node()) as xs:boolean
last=() as xs:integer
#local-name=() as xs:string
local-name=($arg as node()?) as xs:string
local-name-from-QName=($arg as xs:QName?) as xs:NCName?
lower-case=($arg as xs:string?) as xs:string
matches=($input as xs:string?, $pattern as xs:string) as xs:boolean
#matches=($input as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:boolean
max=($arg as xs:anyAtomicType*) as xs:anyAtomicType?
#max=($arg as xs:anyAtomicType*, $collation as string) as xs:anyAtomicType?
min=($arg as xs:anyAtomicType*) as xs:anyAtomicType?
#min=($arg as xs:anyAtomicType*, $collation as string) as xs:anyAtomicType?
minutes-from-dateTime=($arg as xs:dateTime?) as xs:integer?
minutes-from-duration=($arg as xs:duration?) as xs:integer?
minutes-from-time=($arg as xs:time?) as xs:integer?
month-from-date=($arg as xs:date?) as xs:integer?
month-from-dateTime=($arg as xs:dateTime?) as xs:integer?
months-from-duration=($arg as xs:duration?) as xs:integer?
multiply-dayTimeDuration=($arg1 as xs:dayTimeDuration, $arg2 as xs:double) as xs:dayTimeDuration
multiply-yearMonthDuration=($arg1 as xs:yearMonthDuration, $arg2 as xs:double) as xs:yearMonthDuration
#name=() as xs:string
name=($arg as node()?) as xs:string
#namespace-uri=() as xs:anyURI
namespace-uri=($arg as node()?) as xs:anyURI
namespace-uri-for-prefix=($prefix as xs:string?, $element as element()) as xs:anyURI?
namespace-uri-from-QName=($arg as xs:QName?) as xs:anyURI?
nilled=($arg as node()?) as xs:boolean?
node-after=($parameter1 as node(), $parameter2 as node()) as xs:boolean
node-before=($parameter1 as node(), $parameter2 as node()) as xs:boolean
node-name=($arg as node()?) as xs:QName?
#normalize-space=() as xs:string
normalize-space=($arg as xs:string?) as xs:string
normalize-unicode=($arg as xs:string?) as xs:string
#normalize-unicode=($arg as xs:string?, $normalizationForm as xs:string) as xs:string
not=($arg as item()*) as xs:boolean
#number=() as xs:double
number=($arg as xs:anyAtomicType?) as xs:double
numeric-add=($arg1 as numeric, $arg2 as numeric) as numeric
numeric-divide=($arg1 as numeric, $arg2 as numeric) as numeric
numeric-equal=($arg1 as numeric, $arg2 as numeric) as xs:boolean
numeric-greater-than=($arg1 as numeric, $arg2 as numeric) as xs:boolean
numeric-integer-divide=($arg1 as numeric, $arg2 as numeric) as xs:integer
numeric-less-than=($arg1 as numeric, $arg2 as numeric) as xs:boolean
numeric-mod=($arg1 as numeric, $arg2 as numeric) as numeric
numeric-multiply=($arg1 as numeric, $arg2 as numeric) as numeric
numeric-subtract=($arg1 as numeric, $arg2 as numeric) as numeric
numeric-unary-minus=($arg as numeric) as numeric
numeric-unary-plus=($arg as numeric) as numeric
one-or-more=($arg as item()*) as item()+
position=() as xs:integer
prefix-from-QName=($arg as xs:QName?) as xs:NCName?
remove=($target as item()*, $position as xs:integer) as item()*
replace=($input as xs:string?, $pattern as xs:string, $replacement as xs:string) as xs:string
#replace=($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string) as xs:string
resolve-QName=($qname as xs:string?, $element as element()) as xs:QName?
resolve-uri=($relative as xs:string?) as xs:anyURI?
#resolve-uri=($relative as xs:string?, $base as xs:string) as xs:anyURI?
reverse=($arg as item()*) as item()*
#root=() as node()
root=($arg as node()?) as node()?
round=($arg as numeric?) as numeric?
#round-half-to-even=($arg as numeric?) as numeric?
round-half-to-even=($arg as numeric?, $precision as xs:integer) as numeric?
seconds-from-dateTime=($arg as xs:dateTime?) as xs:decimal?
seconds-from-duration=($arg as xs:duration?) as xs:decimal?
seconds-from-time=($arg as xs:time?) as xs:decimal?
starts-with=($arg1 as xs:string?, $arg2 as xs:string?) as xs:boolean
#starts-with=($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:boolean
static-base-uri=() as xs:anyURI?
#string=() as xs:string
string=($arg as item()?) as xs:string
string-join=($arg1 as xs:string*, $arg2 as xs:string) as xs:string
#string-length=() as xs:integer
string-length=($arg as xs:string?) as xs:integer
string-to-codepoints=($arg as xs:string?) as xs:integer*
#subsequence=($sourceSeq as item()*, $startingLoc as xs:double) as item()*
subsequence=($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double) as item()*
#substring=($sourceString as xs:string?, $startingLoc as xs:double) as xs:string
substring=($sourceString as xs:string?, $startingLoc as xs:double, $length as xs:double) as xs:string
substring-after=($arg1 as xs:string?, $arg2 as xs:string?) as xs:string
#substring-after=($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:string
substring-before=($arg1 as xs:string?, $arg2 as xs:string?) as xs:string
#substring-before=($arg1 as xs:string?, $arg2 as xs:string?, $collation as xs:string) as xs:string
subtract-dateTimes=($arg1 as xs:dateTime, $arg2 as xs:dateTime) as xs:dayTimeDuration
subtract-dates=($arg1 as xs:date, $arg2 as xs:date) as xs:dayTimeDuration
subtract-dayTimeDuration-from-date=($arg1 as xs:date, $arg2 as xs:dayTimeDuration) as xs:date
subtract-dayTimeDuration-from-dateTime=($arg1 as xs:dateTime, $arg2 as xs:dayTimeDuration) as xs:dateTime
subtract-dayTimeDuration-from-time=($arg1 as xs:time, $arg2 as xs:dayTimeDuration) as xs:time
subtract-dayTimeDurations=($arg1 as xs:dayTimeDuration, $arg2 as xs:dayTimeDuration) as xs:dayTimeDuration
subtract-times=($arg1 as xs:time, $arg2 as xs:time) as xs:dayTimeDuration
subtract-yearMonthDuration-from-date=($arg1 as xs:date, $arg2 as xs:yearMonthDuration) as xs:date
subtract-yearMonthDuration-from-dateTime=($arg1 as xs:dateTime, $arg2 as xs:yearMonthDuration) as xs:dateTime
subtract-yearMonthDurations=($arg1 as xs:yearMonthDuration, $arg2 as xs:yearMonthDuration) as xs:yearMonthDuration
sum=($arg as xs:anyAtomicType*) as xs:anyAtomicType
#sum=($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?) as xs:anyAtomicType?
time-equal=($arg1 as xs:time, $arg2 as xs:time) as xs:boolean
time-greater-than=($arg1 as xs:time, $arg2 as xs:time) as xs:boolean
time-less-than=($arg1 as xs:time, $arg2 as xs:time) as xs:boolean
timezone-from-date=($arg as xs:date?) as xs:dayTimeDuration?
timezone-from-dateTime=($arg as xs:dateTime?) as xs:dayTimeDuration?
timezone-from-time=($arg as xs:time?) as xs:dayTimeDuration?
to=($firstval as xs:integer, $lastval as xs:integer) as xs:integer*
tokenize=($input as xs:string?, $pattern as xs:string) as xs:string*
#tokenize=($input as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:string*
trace=($value as item()*, $label as xs:string) as item()*
translate=($arg as xs:string?, $mapString as xs:string, $transString as xs:string) as xs:string
true=() as xs:boolean
union=($parameter1 as node()*, $parameter2 as node()*) as node()*
unordered=($sourceSeq as item()*) as item()*
upper-case=($arg as xs:string?) as xs:string
year-from-date=($arg as xs:date?) as xs:integer?
year-from-dateTime=($arg as xs:dateTime?) as xs:integer?
yearMonthDuration-greater-than=($arg1 as xs:yearMonthDuration, $arg2 as xs:yearMonthDuration) as xs:boolean
yearMonthDuration-less-than=($arg1 as xs:yearMonthDuration, $arg2 as xs:yearMonthDuration) as xs:boolean
years-from-duration=($arg as xs:duration?) as xs:integer?
zero-or-one=($arg as item()*) as item()?

analyze-string=xsl:analyze-string
apply-imports=xsl:apply-imports
apply-templates=xsl:apply-templates
attribute=xsl:attribute
attribute-set=xsl:attribute-set
call-template=xsl:call-template
character-map=xsl:character-map
choose=xsl:choose
comment=xsl:comment
copy=xsl:copy
copy-of=xsl:copy-of
decimal-format=xsl:decimal-format
document=xsl:document
element=xsl:element
evaluate=xsl:evaluate
fallback=xsl:fallback
for-each=xsl:for-each
for-each-group=xsl:for-each-group
function=xsl:function
if=xsl:if
include=xsl:include
import=xsl:import
import-schema=xsl:import-schema
key=xsl:key
matching-substring=xsl:matching-substring
message=xsl:message
namespace=xsl:namespace
namespace-alias=xsl:namespace-alias
next-match=xsl:next-match
non-matching-substring=xsl:non-matching-substring
number=xsl:number
otherwise=xsl:otherwise
output=xsl:output
output-character=xsl:output-character
param=xsl:param
perform-sort=xsl:perform-sort
preserve-space=xsl:preserve-space
processing-instruction=xsl:processing-instruction
result-document=xsl:result-document
sequence=xsl:sequence
sort=xsl:sort
strip-space=xsl:strip-space
stylesheet=xsl:stylesheet
template=xsl:template
text=xsl:text
value-of=xsl:value-of
variable=xsl:variable
when=xsl:when
with-param=xsl:with-param