template.handle.1=if
template.name.1=xsl:if block
template.1=<xsl:if test="|">\n\
</xsl:if>

template.handle.2=var
template.name.2=xsl:variable declaration
template.2=<xsl:variable name="|" select=""/>

template.handle.3=choose
template.name.3=xsl:choose block
template.3=<xsl:choose>\n\
  <xsl:when test="|">\n\
  </xsl:when>\n\
  <xsl:otherwise>\n\
  </xsl:otherwise>\n\
</xsl:choose>

template.handle.4=as
template.name.4=xsl:analyze-string block
template.4=<xsl:analyze-string regex="|"\n\
                    select="">\n\
  <xsl:matching-substring>\n\
    <xsl:value-of select="regex-group(1)"/>\n\
  </xsl:matching-substring>\n\
</xsl:analyze-string>

template.handle.5=text
template.name.5=xsl:text block
template.5=<xsl:text>|</xsl:text>

template.handle.6=vo
template.name.6=xsl:value-of statement
template.6=<xsl:value-of select="|"/>

template.handle.7=@
template.name.7=xpath attribute condition
template.7=[@|='']

template.handle.8=cdvo
template.name.8=xsl:value-of in CDATA
template.8=<xsl:text disable-output-escaping="yes">&lt;![CDATA[</xsl:text>\n\
<xsl:value-of select="|" disable-output-escaping="yes"/>\n\
<xsl:text disable-output-escaping="yes">]]&gt;</xsl:text>

template.handle.9=for
template.name.9=xsl:for-each loop
template.9=<xsl:for-each select="|">\n\
</xsl:for-each>